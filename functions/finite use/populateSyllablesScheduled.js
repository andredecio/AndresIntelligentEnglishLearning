// --- NEW: Scheduled Function to populate the Syllables Collection from an external json file. ---
// This function can be triggered manually from the Firebase Console (Functions -> 'populateSyllablesScheduled' -> Trigger Now)
// It will run automatically once a year (Jan 1st), but you'll primarily trigger it manually for one-time setup.

const functions = require("firebase-functions/v1");
const admin = require("firebase-admin");
const { TextToSpeechClient } = require('@google-cloud/text-to-speech');
const { getPhonemeIDsFromSyllableIPA } = require('../helpers/ipaUtils'); // Adjust if it's in a different location

const populateSyllablesScheduled = functions.region('asia-southeast1').runWith({ timeoutSeconds: 540 }).pubsub.schedule('0 0 1 1 *') // Runs Jan 1st (manual trigger is primary use)
    .onRun(async (context) => {
        const firestore = admin.firestore();
        const bucket = admin.storage().bucket();
        const ttsClient = new TextToSpeechClient();
        const collectionName = 'syllables';
        const batch = firestore.batch();
        const now = admin.firestore.FieldValue.serverTimestamp();

        // --- IMPORTANT: PASTE YOUR GENERATED 3000 SYLLABLES ARRAY HERE! ---
        // This array will be generated by the separate Node.js script described below.
        // It should look like: [{ ipa: 'li', title: "Syllable: li" }, { ipa: 'ʌ', title: "Syllable: ʌ" }, ...]
        const commonEnglishSyllables = [];

    functions.logger.info(`[populateSyllablesScheduled] Starting to create ${commonEnglishSyllables.length} English syllable documents...`);

        try {
            for (const s of commonEnglishSyllables) {
                // *** MODIFICATION: Use raw IPA as the Document ID ***
                const moduleID = s.ipa; // Direct use of IPA as the Document ID
                const syllableDocRef = firestore.collection(collectionName).doc(moduleID);

                const docSnapshot = await syllableDocRef.get();

                let newAudioUrl = null;

                try {
                    const request = {
                        input: { ssml: `<speak><phoneme alphabet="ipa" ph="${s.ipa}">${s.ipa}</phoneme></speak>` },
                        voice: { languageCode: 'en-GB', ssmlGender: 'FEMALE', name: 'en-GB-Neural2-A' },
                        audioConfig: { audioEncoding: 'MP3' },
                    };

                    const [response] = await ttsClient.synthesizeSpeech(request);
                    const audioContent = response.audioContent;

                    if (audioContent.length < 500) {
                        functions.logger.warn(`Generated audio for syllable ${s.ipa} is suspiciously small (${audioContent.length} bytes).`);
                    }

                    // *** MODIFICATION: Audio file name uses raw IPA ***
                    const audioFileName = `${s.ipa}.mp3`;
                    const audioFilePath = `syllable_audio/${audioFileName}`;
                    const file = bucket.file(audioFilePath);

                    await file.save(audioContent, {
                        metadata: { contentType: 'audio/mpeg' },
                        public: true
                    });

                    newAudioUrl = file.publicUrl();
                    functions.logger.info(`Generated and uploaded audio for syllable ${s.ipa} to: ${newAudioUrl}`);

                } catch (audioGenError) {
                    functions.logger.error(`Failed to generate or upload audio for syllable ${s.ipa}:`, audioGenError);
                    newAudioUrl = docSnapshot.exists && docSnapshot.data().audioUrl ? docSnapshot.data().audioUrl : null;
                    functions.logger.warn(`Retaining previous audioUrl for ${s.ipa} due to generation error: ${newAudioUrl}`);
                }

                // --- NEW ADDITION: CALL THE NEW HELPER FUNCTION HERE TO POPULATE MODULEID_ARRAY ---
                const phonemeModuleIDsForSyllable = getPhonemeIDsFromSyllableIPA(s.ipa);
                functions.logger.info(`Syllable '${s.ipa}' decomposed into phonemes: ${JSON.stringify(phonemeModuleIDsForSyllable)}`);

                const baseDocData = {
                    MODULEID: moduleID, // This field now matches the Document ID directly (the raw IPA)
                    MODULETYPE: 'SYLLABLE',
                    TITLE: `Syllable: ${s.ipa}`, // *** MODIFICATION: Updated title format to use raw IPA ***
                    IPA: s.ipa,
                    DESCRIPTION: `Audio and details for the English syllable "${s.ipa}".`,
                    normalizedTitle: s.ipa.toLowerCase(),
                    audioUrl: newAudioUrl,
                    MODULEID_ARRAY: phonemeModuleIDsForSyllable, // *** MODIFICATION: Populate with the parsed phoneme IDs ***
                    createdAt: now,
                    updatedAt: now,
                };

                if (docSnapshot.exists) {
                    batch.update(syllableDocRef, {
                        ...baseDocData,
                        createdAt: docSnapshot.data().createdAt,
                        // Ensure MODULEID_ARRAY is updated with the new parsing logic
                        MODULEID_ARRAY: phonemeModuleIDsForSyllable, // *** MODIFICATION: Ensure update applies the new array ***
                    });
                    functions.logger.info(`[populateSyllablesScheduled] Updating existing document for syllable ${s.ipa}.`);
                } else {
                    batch.set(syllableDocRef, baseDocData);
                    functions.logger.info(`[populateSyllablesScheduled] Creating new document for syllable ${s.ipa}.`);
                }
            }

            await batch.commit();
            functions.logger.info(`[populateSyllablesScheduled] Batch commit completed for English syllable documents.`);
            return { status: "success", message: `Successfully processed syllable documents in '${collectionName}' collection.` };
        } catch (error) {
            functions.logger.error('[populateSyllablesScheduled] Error processing syllable documents:', error);
            return { status: "error", message: `Failed to process syllable documents: ${error.message}` };
        }
    });

module.exports = {
  populateSyllablesScheduled,
};